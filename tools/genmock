#!/usr/bin/env bash
#
# Generate a mock from an interface-file.
#

usage() {
    echo "USAGE: $0 [-h] | <in.hh> <gmock_gen.py>"
    echo ""
    echo " -h, --help  Show this help text."
    echo ""
    echo "This tool make use of the provided gmock_gen.py script"
}

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    usage
    exit 0
fi

file=$1
gen=$2

if [ "${file}" == "" ] || [ "${gen}" == "" ]; then
    echo "ERROR: No arguments provided, use -h or --help for more information" >&2
    exit 1
fi

class=$(basename $file .hh | sed -re 's/_([a-z])/\u\1/g' -e 's/^([a-z])/\u\1/g')
interface="${class}Interface"

#mock_name=`echo $mock_file | sed -r 's/([a-z]+)_([a-z])([a-z]+)/\1\U\2\L\3/'`
mock=$(echo "Mock${interface}" | sed -r 's/Interface//')
base=$(echo $mock | sed -r 's/([A-Z][a-z]+)([A-Z][a-z]+)/\1_\2_/g;s/_$//' | tr [:upper:] [:lower:])
include_guard=`echo ${base} | tr '[:lower:]' '[:upper:]'`

#
# By default assume that the mock-set should include a vector wrapper mock.
#
has_vector_interface=1
plural=$(egrep -e '^VECTOR_OF\(' $file | cut -d',' -f2 | sed -e 's/ //g')
singular=$(egrep -e '^VECTOR_OF\(' $file | cut -d',' -f1 | cut -d'(' -f2| sed -e 's/ //g')
if [ "$plural" == "" ]; then
    #
    # ... But not if the VECTOR_OF could not be found.
    #
    has_vector_interface=0
fi

#
# Extract only the implementatino (and replace private: and protected:)
#
offset=$(egrep -n "^class ${class}Template\b" $file | cut -d':' -f1)
tailoffset=$[$(wc -l $file | cut -d' ' -f1)-$offset+1]
length=$(tail -${tailoffset} $file | egrep -n '^};' | head -1 | cut -d':' -f1)
tail -$tailoffset $file | head -$length | sed -e 's/private:/\/\/private:/;s/protected:/\/\/protected:/;s/public:/\/\/public:/' > /tmp/$$.impl
awk 'BEGIN {
         RS = "\n" ;
         FS = "" ;
         d = 0 ;
     }

     {
         for (i=1; i<=NF; i++)
             if ($i == "{") {
                 d++ ;
                 if (d == 1) printf "{\n"
             } else
             if ($i == "}") {
                 d-- ;
                 if (d == 0) printf "}"
             } else
             if (d == 1)
                 printf "%s", $i ;
         if (d == 1) printf "\n"
     }' /tmp/$$.impl | egrep '\/\/.*:|virtual' | grep -v 'virtual ~' | sed -e 's/)/) = 0\;/g' > /tmp/$$.virtualized
echo "class FOOBAR {" > /tmp/$$.impl2
cat /tmp/$$.virtualized >> /tmp/$$.impl2
echo "  FOOBAR() {}" >> /tmp/$$.impl2
echo "  virtual ~FOOBAR() {}" >> /tmp/$$.impl2
echo "};" >> /tmp/$$.impl2
$gen /tmp/$$.impl2 FOOBAR | sed -e 's/^};//' -e 's/>\*/\*>\*/g' -e "s/{/{\n\npublic:/" -e "s/ public://" | sed -e 's/MockFOOBAR/Fake'"$class"'/g;s/FOOBAR/'"$class"'Mock/g' > /tmp/$$.mock

#
# Extract only the interface
#
offset=$(egrep -n "^class $interface" $file | cut -d':' -f1)
tailoffset=$[$(wc -l $file | cut -d' ' -f1)-$offset+1]
length=$(tail -${tailoffset} $file | egrep -n '^};' | head -1 | cut -d':' -f1)
tail -$tailoffset $file | head -$length > /tmp/$$.inter


last_inherit_line=$(grep -n '{' /tmp/$$.inter | head -1 | cut -d':' -f1)
mocks=$(head -$last_inherit_line /tmp/$$.inter | sed -e 's/.*class.*://g;s/virtual //g;s/{//g;s/Interface//g;s/public /public Mock/g;s/\s*$//g' | tr -d "\n" | sed 's/ \{1,\}/ /g' | sed -e 's/^class.*//g')

if [ "$mocks" != "" ]; then
    mocks="$mocks "
fi

mock_files=$(echo $mocks | sed -e 's/public //g;s/ //g')


#echo "s/MOCKS/$mocks/g" >> /tmp/$$.sed

echo "/**"
echo " * @file ${base}.hh"
echo " *"
echo " * This is a generated mock-up of the ${interface} interface class."
echo " */"
echo "#ifndef _${include_guard}_HH_"
echo "#define _${include_guard}_HH_"
echo ""
echo "#include <gmock/gmock.h>"
echo "#include \"${file}\""
egrep '^#include "' $file | grep -v 'error.hh' | grep -v 'vector_of.hh' | sed -e 's/ "/ "mock_/g'
echo ""
if [ $has_vector_interface == 1 ]; then
    echo "#include \"vector_of.hh\""
fi
echo ""
echo "/**"
echo " * Mock-up based on the ${interface} pure virtual interferface."
echo " */"
$gen /tmp/$$.inter $interface | sed -e 's/^};//' -e 's/>\*/\*>\*/g' -e "s/Interface :/ :/" -e "s/{/{\n\npublic:/" -e "s/ public://" #| sed -f /tmp/$$.sed
echo ""
echo "  /*"
echo "   * Interface compatible constructors."
echo "   */"
egrep "^ +$interface\(.*\)" /tmp/$$.inter | sed -r 's/^( +)(.+)Interface\(/\1Mock\2\(/g'
#echo "  MOCK_METHOD0(Die, void());"
#echo "  virtual ~${mock}() { Die(); };"
echo ""
for i in $(egrep '^#include "' $file | grep -v 'error.hh' | grep -v 'vector_of.hh' | sed -e 's/ "/ "mock_/g' | cut -d '"' -f2); do
    classname=$(basename $i .hh | sed -re 's/_([a-z])/\u\1/g' -e 's/^([a-z])/\u\1/g')
    if [ "$(echo $mock_files | grep $classname)" != "" ]; then
        echo "  // $classname"
        grep -A1 MOCK_M $i | grep -v Die | grep -v '-'
        echo ""
    fi
done
echo "};"
echo ""
echo "/**"
echo " * Convenience class name for the implementation template using only mock"
echo " * classes as references internally."
echo " */"
grep -Pzo '(?s)^typedef.*Template\<.*;' $file | sed -r 's/(<)(.*)(,|>)/\1Mock\2\3/g;s/^( +)(.*)(,|>)/\1Mock\2\3/g;s/(, *)(.*)([,|>])/\1Mock\2\3/g;s/> +(.*);/> \1Mock;/'
echo ""
cat /tmp/$$.mock
echo ""
egrep '\s+'"$class"'Template\(' /tmp/$$.impl | sed -e 's/).*/) {}/'
egrep '\s+'"$class"'\(' /tmp/$$.impl | sed -e 's/).*/) {}/'
#rm -f /tmp/$$.mock
#rm -f /tmp/$$.virtualized
#rm -f /tmp/$$.impl
#rm -f /tmp/$$.impl2
echo "};"
echo ""
echo ""
echo "/**"
echo " * Mock-up based on the ${interface} pure virtual interferface with"
echo " * positbility to \"mock\" the destructor via the Die method."
echo " */"
echo "class Mock${interface}Die : public Mock${interface} {" | sed -e 's/Interface//g'
echo ""
echo "public:"
echo ""
echo "  /*"
echo "   * Interface compatible constructors."
echo "   */"
egrep "^ +$interface\(.*\)" /tmp/$$.inter | sed -r 's/^( +)(.+)Interface\(/\1Mock\2Die\(/g'
echo "  MOCK_METHOD0(Die, void());"
echo "  virtual ~${mock}Die() { Die(); };"
echo ""
echo "};"
if [ $has_vector_interface == 1 ]; then
    echo ""
    echo ""
#    echo "VECTOR_OF(Mock$singular, Mock$plural, 0xffffff);"
    echo "/**"
    echo " * Mock-up based on the ${plural}Interface pure virtual interface."
    echo " */"
    echo "class Mock${plural} : virtual public ${plural}Interface,"
    echo "                      virtual public vector<Mock${singular}*> {"
    echo ""
    echo "public:"
    echo ""
    echo "  Mock${plural}() : vector<Mock${singular}*>() {}"
#    echo "  MOCK_METHOD0(Mock${plural}Die, void());"
#    echo "  virtual ~Mock${plural}() { Mock${plural}Die(); };"
#    echo "  MOCK_METHOD1(push_back, void($interface* abstract));"
#    echo "  MOCK_METHOD1(erase, void(vector<$singular*>::iterator position));"
#    echo "  MOCK_CONST_METHOD0(size, size_t());"
    echo ""
    echo "};"
    echo ""
    echo ""
    echo "class Mock${plural}Die : public Mock${plural} {"
    echo ""
    echo "public:"
    echo ""
    echo "  MOCK_METHOD0(Die, void());"
    echo "  virtual ~Mock${plural}Die() { Die(); };"
    echo ""
    echo "};"
fi
echo ""
echo "/**"
echo " * Fast way to create mockups of this class with the factory template."
echo " */"
grep -Pzo '(?s)^typedef.*FactoryTemplate\<.*;' $file | sed -r 's/(<)(.*)(,|>)/\1Mock\2\3/g;s/^( +)(.*)(,|>)/\1Mock\2\3/g;s/(, *)(.*)([,|>])/\1Mock\2\3/g;s/> +(.*);/> Mock\1;/'
echo ""
echo "#endif"
rm /tmp/$$.inter
